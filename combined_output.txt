--- Start of ./src\App.js ---
import React, { useState } from "react";
import InputForm from "./components/InputForm";
import WeatherGraph from "./components/WeatherGraph";
import WeatherTable from "./components/WeatherTable";
import { fetchWeatherData } from "./utils/api";

const App = () => {
  const [loading, setLoading] = useState(false);
  const [weatherData, setWeatherData] = useState(null);

  const handleFetchData = async ({ latitude, longitude, startDate, endDate }) => {
    setLoading(true);
    try {
      const data = await fetchWeatherData(latitude, longitude, startDate, endDate);
      setWeatherData({
        dates: data.time,
        maxTemps: data.temperature_2m_max,
        minTemps: data.temperature_2m_min,
      });
    } catch (error) {
      console.error(error);
      alert("Error fetching weather data.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto p-4">
      <InputForm onFetchData={handleFetchData} />
      {loading ? (
        <div className="flex justify-center items-center">
          <div className="spinner-border animate-spin inline-block w-8 h-8 border-4 rounded-full border-t-transparent border-blue-500"></div>
          <p>Loading...</p>
        </div>
      ) : weatherData ? (
        <>
          <WeatherGraph data={weatherData} />
          <WeatherTable data={weatherData.dates.map((date, index) => ({
            date,
            maxTemp: weatherData.maxTemps[index],
            minTemp: weatherData.minTemps[index],
          }))} />
        </>
      ) : (
        <p>No data available.</p>
      )}
    </div>
  );
};

export default App;


--- Start of ./src\index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;


body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


--- Start of ./src\index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);



--- Start of ./src\components\InputForm.js ---
import React, { useState } from "react";

const InputForm = ({ onFetchData }) => {
  const [latitude, setLatitude] = useState("");
  const [longitude, setLongitude] = useState("");
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [error, setError] = useState("");

  const validateInputs = () => {
    if (!latitude || !longitude || !startDate || !endDate) {
      return "All fields are required.";
    }
    if (isNaN(latitude) || isNaN(longitude)) {
      return "Latitude and Longitude must be valid numbers.";
    }
    if (new Date(startDate) > new Date(endDate)) {
      return "Start date must be before the end date.";
    }
    return null;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationError = validateInputs();
    if (validationError) {
      setError(validationError);
      return;
    }
    setError("");
    onFetchData({ latitude, longitude, startDate, endDate });
  };

  return (
    <form className="p-4 bg-white rounded-lg shadow-md" onSubmit={handleSubmit}>
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <div className="grid gap-4 md:grid-cols-2">
        <div>
          <label className="block text-sm font-medium text-gray-700">Latitude</label>
          <input
            type="text"
            placeholder="Latitude"
            value={latitude}
            onChange={(e) => setLatitude(e.target.value)}
            className="p-2 border rounded w-full"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Longitude</label>
          <input
            type="text"
            placeholder="Longitude"
            value={longitude}
            onChange={(e) => setLongitude(e.target.value)}
            className="p-2 border rounded w-full"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">Start Date</label>
          <input
            type="date"
            value={startDate}
            onChange={(e) => setStartDate(e.target.value)}
            className="p-2 border rounded w-full"
          />
        </div>
        <div>
          <label className="block text-sm font-medium text-gray-700">End Date</label>
          <input
            type="date"
            value={endDate}
            onChange={(e) => setEndDate(e.target.value)}
            className="p-2 border rounded w-full"
          />
        </div>
      </div>
      <button
        type="submit"
        className="mt-4 px-6 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 w-full"
      >
        Fetch Data
      </button>
    </form>
  );
};

export default InputForm;


--- Start of ./src\components\WeatherGraph.js ---
import React from "react";
import { Line } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from "chart.js";

// Register the necessary components
ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

const WeatherGraph = ({ data }) => {
  const chartData = {
    labels: data.dates,
    datasets: [
      {
        label: "Max Temp (°C)",
        data: data.maxTemps,
        borderColor: "#FF5733", // Red
        fill: false,
      },
      {
        label: "Min Temp (°C)",
        data: data.minTemps,
        borderColor: "#3498db", // Blue
        fill: false,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      tooltip: {
        callbacks: {
          title: function (tooltipItems) {
            return `Date: ${tooltipItems[0].label}`;
          },
          label: function (tooltipItem) {
            return `${tooltipItem.dataset.label}: ${tooltipItem.raw}°C`;
          },
        },
      },
      legend: {
        position: "top",
      },
    },
  };

  return <Line data={chartData} options={options} />;
};

export default WeatherGraph;


--- Start of ./src\components\WeatherTable.js ---
import React, { useState } from "react";

const WeatherTable = ({ data }) => {
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);

  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentData = data.slice(indexOfFirstRow, indexOfLastRow);

  const totalPages = Math.ceil(data.length / rowsPerPage);

  return (
    <div>
      <table className="table-auto w-full border-collapse border border-gray-200">
        <thead>
          <tr>
            <th className="border px-4 py-2">Date</th>
            <th className="border px-4 py-2">Max Temp</th>
            <th className="border px-4 py-2">Min Temp</th>
          </tr>
        </thead>
        <tbody>
          {currentData.map((row, index) => (
            <tr key={index} className="hover:bg-gray-100">
              <td className="border px-4 py-2">{row.date}</td>
              <td className="border px-4 py-2">{row.maxTemp}</td>
              <td className="border px-4 py-2">{row.minTemp}</td>
            </tr>
          ))}
        </tbody>
      </table>
      <div className="mt-4 flex justify-between items-center">
        <div>
          Rows per page:
          <select
            value={rowsPerPage}
            onChange={(e) => setRowsPerPage(Number(e.target.value))}
            className="ml-2 border rounded p-1"
          >
            <option value={10}>10</option>
            <option value={20}>20</option>
            <option value={50}>50</option>
          </select>
        </div>
        <div>
          Page {currentPage} of {totalPages}
          <button
            className="ml-2 px-4 py-1 bg-gray-300 rounded"
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          >
            Prev
          </button>
          <button
            className="ml-2 px-4 py-1 bg-gray-300 rounded"
            onClick={() =>
              setCurrentPage((prev) => Math.min(prev + 1, totalPages))
            }
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
};

export default WeatherTable;


--- Start of ./src\utils\api.js ---
import axios from "axios";

export const fetchWeatherData = async (latitude, longitude, startDate, endDate) => {
  const url = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&start_date=${startDate}&end_date=${endDate}&daily=temperature_2m_max,temperature_2m_min`;

  const response = await axios.get(url);
  return response.data.daily;
};


